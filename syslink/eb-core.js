var ebhub_ajax = { html_id: "",  is_valid: false,  is_encode: true,  is_formdata: true, isdynamic_postlink: false,  isdynamic_csrfvalue: false,  allow_cache: true,  response: { object: [],  cache: [],  is_cache: [],  is_fault: false, is_error: [], last_errorcode: 0, errorcode: [], is_norenderhapped: false, is_norender: [], is_valid: [] },  payload: { loadstack: [],  old_serverpkey: "",  old_postlink: "",  old_csrfvalue: "",  user_options: new Object(),  dataform: [],  element: []  },  status: { current_method: "",  current_identity: "",  is_ajaxloading: false,  is_loading: [],  is_binary: [],  is_tobecrypt: [] },  error: { is_there: false,  is_shown: false,  message: "",  code: 0,  count: 0,  retry_interval: 4  },  dynamics: { postlink: [],  csrf: [],  serverpkey: [],  clientpkey: []  },  hash: { is_reload: false,  previous: "",  urlhash: "",  current_url: "",  criteria: /^([a-z0-9-_*!#])+$/ },  firemeup: function () { ebhub_ajaxmark.init(); ebhub_post.init(); window.onhashchange = ebhub_ajaxhash.init; if (ebhubjs.userfireup) { ebhubjs.userfireup(); } }   }; var eb_ajax = { async_timeout: null, async_object: null, async_function: '', core: function ($arg_method, $arg_identity) { var $methodid = $arg_method + '_' + $arg_identity; if (ajaxhub.check_validity()) { var $postlink = ''; if (ebhub_ajax.isdynamic_postlink === true) { if (ebhub_ajax.html_id.eb_postlink !== 'ebhub') { $postlink = ebhub_ajax.html_id.eb_postlink; ebhub_ajax.payload.old_postlink = $postlink; ebhub_ajax.html_id.eb_postlink = 'ebhub'; } else { if (ebhub_ajax.dynamics.postlink[$methodid] && ebhub_ajax.dynamics.postlink[$methodid] !== '0') { $postlink = ebhub_ajax.dynamics.postlink[$methodid]; } else { $postlink = ebhub_ajax.payload.old_postlink; } } } else { $postlink = ebhub_ajax.html_id.eb_postlink; } if (eb_ajax.async_function === '') { ajaxhub.errorset(702, 'No Specified Ajax Function.'); } else { try { eb_ajax.async_object = new XMLHttpRequest(); } catch (ebhub) { var $xml_http_versions = new Array("MSXML2.eb_ajax.async_object.6.0", "MSXML2.eb_ajax.async_object.5.0", "MSXML2.eb_ajax.async_object.4.0", "MSXML2.eb_ajax.async_object.3.0", "MSXML2.eb_ajax.async_object", "Microsoft.eb_ajax.async_object"); for (var i=0; i < $xml_http_versions.length && !eb_ajax.async_object; i++) { try { eb_ajax.async_object = new ActiveXObject($xml_http_versions[i]); } catch (ebhub) { eb_ajax.async_object = null; ajaxhub.errorset(704, 'No Available Ajax Object.'); } } } if (eb_ajax.async_object !== null) { try { if ((eb_ajax.async_object.readyState === 4 || eb_ajax.async_object.readyState === 0)) { eb_ajax.async_object.open('POST', ebhub_ajax.html_id.eb_postlinkpath +  $postlink + '/post/ajax', true); if ($arg_method !== 'ajaxpost') { eb_ajax.async_object.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8"); } else { if (ebhub_ajax.status.is_binary[$methodid] === false && ebhub_ajax.is_formdata === false) { eb_ajax.async_object.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8"); } } eb_ajax.async_object.setRequestHeader("EBHUB_AJAX", $postlink); eb_ajax.async_object.onreadystatechange = function () { if (eb_ajax.async_object.readyState === 4) { if (eb_ajax.async_object.status === 200 || eb_ajax.async_object.status === 304) { if (eb_ajax.async_timeout !== null) { clearTimeout(eb_ajax.async_timeout); } eb_ajax.async_function(); } else { if (eb_ajax.async_object.status !== 404) { eb_ajax.timeout($arg_method, $arg_identity); } } } }; var $payload = ''; if ($arg_method !== 'ajaxpost') { $payload = ebhub_ajax.payload.element[$methodid]; } else { if (ebhub_ajax.is_formdata === true) { $payload = ebhub_ajax.payload.dataform[$methodid]; } else { if (ebhub_ajax.status.is_binary[$methodid] === true) { $payload = ebhub_ajax.payload.dataform[$methodid]; } else { $payload = ebhub_ajax.payload.element[$methodid]; } } } eb_ajax.async_object.send($payload); } } catch (ebhub) { eb_ajax.timeout($arg_method, $arg_identity); } } else { eb_ajax.timeout($arg_method, $arg_identity); } } } return; },  timeout: function ($arg_method, $arg_identity) { if (ajaxhub.check_validity()) { if (eb_ajax.async_object !== null) { eb_ajax.async_object.abort(); } else { if (ebhub_ajax.error.count < 4) { eb_ajax.async_timeout = setTimeout("eb_ajax.core('" + $arg_method + "', '" + $arg_identity + "')", ebhub_ajax.error.retry_interval * 1000); } else { ajaxhub.errorset(706, 'The server timed out while making your request.  Please try again later.'); } ebhub_ajax.error.count++; } } return; } }; var ajaxhub = { set: function ($arg_method, $arg_identity, $arg_elements = '', $arg_event = null) { var $methodid = $arg_method + '_' + $arg_identity; if (ebhub_ajax.status.is_ajaxloading === true) { eb_ajax.loadstack.push($methodid); return null; } ebhub_ajax.status.current_method = $arg_method; ebhub_ajax.status.current_identity = $arg_identity; ebhub_ajax.status.is_ajaxloading = true; ebhub_ajax.status.is_loading[$methodid] = true; var $retval = null; var $content = ''; var $is_norender = false; var $errorcode = 0; if (ebhub_ajax.allow_cache === true && ebhub_ajax.response.cache[$methodid]) { $content = ebhub_ajax.response.cache[$methodid]; if ($content.length === 0) { $is_norender = true; } if (ebhub_ajax.response.errorcode[$methodid]) { $errorcode = ebhub_ajax.response.errorcode[$methodid]; } if (ebhub_ajax.response.is_norender[$methodid]) { $is_norender = ebhub_ajax.response.is_norender[$methodid]; } $retval = ajaxhub.run_process($arg_method, $arg_identity, $content, $errorcode, $is_norender); } else { var $is_error = false; var $is_cache = false; var $error_message = 'No Valid Ajax Object.'; var $is_array = false; var $postlink = 0; var $csrf = 0; var $serverpkey = 0; var $clientpkey = 0; var $is_success = false; if (ebhub_ajax.html_id.eb_spakey[$methodid] && ebhub_ajax.html_id.eb_spaval[$methodid]) { var $csrfvalue = ''; if (ebhub_ajax.isdynamic_csrfvalue === true) { if (ebhub_ajax.html_id.eb_spaval[$methodid] !== 'ebhub') { $csrfvalue = ebhub_ajax.html_id.eb_spaval[$methodid]; ebhub_ajax.payload.old_csrfvalue = $csrfvalue; ebhub_ajax.html_id.eb_spaval[$methodid] = 'ebhub'; } else { if (ebhub_ajax.dynamics.csrf[$methodid] && ebhub_ajax.dynamics.csrf[$methodid] !== '0') { $csrfvalue = ebhub_ajax.dynamics.csrf[$methodid]; } else { $csrfvalue = ebhub_ajax.payload.old_csrfvalue; } } } else { $csrfvalue = ebhub_ajax.html_id.eb_spaval[$methodid]; } var $payload = $csrfvalue + ebhub_ajax.html_id.eb_spadiv + ebhub_ajax.html_id.eb_spaorg + ebhub_ajax.html_id.eb_spadiv + $arg_method + ebhub_ajax.html_id.eb_spadiv + $arg_identity; ebhub_ajax.status.is_binary[$methodid] = false; var $sendoptions = new Object(); var $is_encrypted = ajaxhub.check_ifcrypt($methodid); switch ($arg_method) { case "ajaxhash":  ebhub_ajaxhash.clearcontent(); if (ebhubjs.hashprior) { var $priorvalues = ebhubjs.hashprior($arg_identity); $is_success = ajaxhub.run_prior($priorvalues, $methodid); $sendoptions = $priorvalues; if ($is_success === false) { ajaxhub.errorset(720, 'Hash Method-ID "' + $methodid + '" has pre-processing errors.'); } } else { ajaxhub.errorset(722, 'No Available Function (ebhubjs.hashprior)'); } break; case "ajaxmark":  ebhub_ajaxmark.clearcontent(); if (ebhubjs.markprior) { var $priorvalues = ebhubjs.markprior($arg_identity); $is_success = ajaxhub.run_prior($priorvalues, $methodid); $sendoptions = $priorvalues; if ($is_success === false) { ajaxhub.errorset(724, 'Mark Method-ID "' + $methodid + '" has pre-processing errors.'); } } else { ajaxhub.errorset(726, 'No Available Function (ebhubjs.markprior)'); } break; case "ajaxpost": ebhub_post.clearcontent(); var $dataform = new FormData(); var $retform = ebhub_post.form($arg_elements, $is_encrypted, $methodid, $dataform); var $dataform = $retform[2]; if (ebhubjs.ajaxpostprior) { var $priorvalues = ebhubjs.ajaxpostprior($arg_identity, $retform[0], $retform[1]); $is_success = ajaxhub.run_prior($priorvalues, $methodid); $sendoptions = $priorvalues; if ($is_success === true) { if (ebhub_ajax.status.is_binary[$methodid] === true) { if (ebhub_ajax.payload.user_options[$methodid].length !== 0) { $dataform.append(ebhub_ajax.html_id.eb_spaopt, JSON.stringify(ebhub_ajax.payload.user_options[$methodid])); } else { $dataform.append(ebhub_ajax.html_id.eb_spaopt, '{}'); } $dataform.append(ebhub_ajax.html_id.eb_spakey[$methodid], $payload); ebhub_ajax.payload.dataform[$methodid] = $dataform; } } else { ajaxhub.errorset(728, 'AjaxPost Method-ID "' + $methodid + '" has pre-processing errors.'); } } else { ajaxhub.errorset(730, 'No Available Function (ebhubjs.ajaxpostprior)'); } break; case "syncpost":  var $dataform = new FormData(); var $retform = ebhub_post.form($arg_elements, $is_encrypted, $methodid, $dataform, $arg_identity); var $dataform = $retform[2]; if (ebhubjs.syncpostprior) { var $priorvalues = ebhubjs.syncpostprior($arg_identity, $retform[0], $retform[1]); $is_success = ajaxhub.run_prior($priorvalues, $methodid); $sendoptions = $priorvalues; var $element_input = document.createElement("input");  $element_input.type = "hidden"; $element_input.name = ebhub_ajax.html_id.eb_spakey[$methodid]; $element_input.value = $payload; document.getElementById($arg_identity).appendChild($element_input); if ($is_success === true) { $is_success = false; if (ebhub_ajax.status.is_binary[$methodid] === true) { if (ebhub_ajax.payload.user_options[$methodid].length !== 0) { $dataform.append(ebhub_ajax.html_id.eb_spaopt, JSON.stringify(ebhub_ajax.payload.user_options[$methodid])); } else { $dataform.append(ebhub_ajax.html_id.eb_spaopt, '{}'); } $dataform.append(ebhub_ajax.html_id.eb_spakey[$methodid], $payload); ebhub_ajax.payload.dataform[$methodid] = $dataform; } } else { for (var i = 0; i < $arg_elements.length; i++) { if ($arg_elements[i].getAttribute("name") !== null && $arg_elements[i].type === 'checkbox') { $arg_elements[i].checked = false; } } ajaxhub.errorset(732, 'SyncPost Method-ID "' + $methodid + '" has pre-processing errors.'); if ($arg_event !== null) { $arg_event.preventDefault(); } } } else { ajaxhub.errorset(734, 'No Available Function (ebhubjs.syncpostprior)'); if ($arg_event !== null) { $arg_event.preventDefault(); } } break; default:  ajaxhub.errorset(736, 'Invalid Method: ' + $arg_method); break; } } else { ajaxhub.errorset(738, 'Specified Method-ID "' + $methodid + '" does not exists.'); if ($arg_event !== null) { $arg_event.preventDefault(); } } if ($is_success === true) { if ($arg_elements === '') { if (ebhub_ajax.payload.user_options[$methodid].length !== 0) { $sendoptions = JSON.stringify(ebhub_ajax.payload.user_options[$methodid]); } else { $sendoptions = '{}'; } } else { if (ebhub_ajax.payload.user_options[$methodid].length !== 0) { $sendoptions = JSON.stringify(ebhub_ajax.payload.user_options[$methodid]) + '&' + $arg_elements; } else { $sendoptions = '{}' + '&' + $arg_elements; } } ebhub_ajax.payload.element[$methodid] = ebhub_ajax.html_id.eb_spakey[$methodid] + '=' + $payload + '&' + ebhub_ajax.html_id.eb_spaopt + '=' + $sendoptions; eb_ajax.async_function = function () { $is_cache = false; ebhub_ajax.response.object[$methodid] = eb_ajax.async_object.responseXML; if (ebhub_ajax.response.object[$methodid] === null) { ajaxhub.errorset(740, $error_message); $is_error = true; $errorcode = 710; $is_norender = false; $content = $error_message; $is_cache = false; $is_array = false; $postlink = 0; $csrf = 0; $serverpkey = 0; $clientpkey = 0; } else { $is_error = !!+ebhub_ajax.response.object[$methodid].getElementsByTagName("is_error")[0].firstChild.data; $errorcode = ebhub_ajax.response.object[$methodid].getElementsByTagName("error_code")[0].firstChild.data; $is_norender = !!+ebhub_ajax.response.object[$methodid].getElementsByTagName("is_norender")[0].firstChild.data; $content = ebhub_ajax.response.object[$methodid].getElementsByTagName("content")[0].firstChild.data; $is_cache = !!+ebhub_ajax.response.object[$methodid].getElementsByTagName("is_cache")[0].firstChild.data; $is_array = !!+ebhub_ajax.response.object[$methodid].getElementsByTagName("is_array")[0].firstChild.data; $postlink = ebhub_ajax.response.object[$methodid].getElementsByTagName("postlink")[0].firstChild.data; $csrf = ebhub_ajax.response.object[$methodid].getElementsByTagName("csrf")[0].firstChild.data; $serverpkey = ebhub_ajax.response.object[$methodid].getElementsByTagName("serverpkey")[0].firstChild.data; $clientpkey = ebhub_ajax.response.object[$methodid].getElementsByTagName("clientpkey")[0].firstChild.data; if ($content.length !== 0) { $content = atob($content); if ($is_array === true) { $content = JSON.parse($content); } } else { $is_norender = true; $content = ''; } } ebhub_ajax.response.is_fault= $is_error; ebhub_ajax.response.is_error[$methodid] = $is_error; ebhub_ajax.response.last_errorcode = $errorcode; ebhub_ajax.response.errorcode[$methodid] = $errorcode; ebhub_ajax.response.is_norenderhapped = $is_norender; ebhub_ajax.response.is_norender[$methodid] = $is_norender; if ($postlink !== '0') { ebhub_ajax.dynamics.postlink[$methodid] = $postlink; } if ($csrf !== '0') { ebhub_ajax.dynamics.csrf[$methodid] = $csrf; } if ($serverpkey !== '0') { ebhub_ajax.dynamics.serverpkey[$methodid] = $serverpkey; } if ($clientpkey !== '0') { ebhub_ajax.dynamics.clientpkey[$methodid] = $clientpkey; } if ($errorcode === '0' && $is_norender === false) { if (!ebhub_ajax.response.is_valid[$methodid]) { ebhub_ajax.response.is_valid[$methodid] = true; } ebhub_ajax.response.is_cache[$methodid] = $is_cache; if (ebhub_ajax.allow_cache === true && $is_cache === true) { ebhub_ajax.response.cache[$methodid] = $content; } } $retval = ajaxhub.run_process($arg_method, $arg_identity, $content, $errorcode, $is_norender); }; eb_ajax.core($arg_method, $arg_identity); } } ebhub_ajax.status.is_ajaxloading = false; ebhub_ajax.status.is_loading[$methodid] = false; return $retval; },  errordeclare: function () { if (ebhubjs.ajaxerror) { if (ebhub_ajax.error.is_there === true) { ebhubjs.ajaxerror(ebhub_ajax.error.code, ebhub_ajax.error.message); ebhub_ajax.error.is_shown = true; } } else { ajaxhub.errorset(742, 'No Available Function (ebhubjs.ajaxerror)'); } return; },  errorset: function ($arg_code, $arg_message) { ebhub_ajax.error.is_there = true; ebhub_ajax.error.code = $arg_code; ebhub_ajax.error.message = $arg_message; return; },  errorclear: function () { ebhub_ajax.error.is_there = false; ebhub_ajax.error.code = 0; ebhub_ajax.error.message = ''; ebhub_ajax.error.is_shown = false; return; },  debugcount: '',  debug: function ($arg_console, $arg_title = '') { if (ajaxhub.debugcount === '') { ajaxhub.debugcount = 1; } var $consoletype = typeof $arg_console; if ($arg_console === '') { $arg_console = 'Empty'; } if ($arg_console === null) { $arg_console = 'Null'; $consoletype = $arg_console; } switch ($consoletype) { case 'object':  if (Array.isArray($arg_console) === true) { $consoletype = 'Array'; } else { $consoletype = 'Object'; } $arg_console = $arg_console.toString(); break; case 'boolean':  $consoletype = 'Boolean'; if ($arg_console === true) { $arg_console = 'True'; } else { $arg_console = 'False'; } break; case 'number':  $consoletype = 'Number'; break; case 'string':  $consoletype = 'String'; break; case 'symbol':  $consoletype = 'Symbol'; break; case 'function':  $consoletype = 'Function'; break; case 'Null':  break; case 'undefined':  default:  $consoletype = 'Undefined'; break; } var $padding = "000000"; if ($arg_title !== '') { if (typeof $arg_console === 'string') { $arg_title = "[" + $arg_title + "]"; } else { $arg_title = ''; } } console.log("EBHub Debug::STEP-" + ($padding+ajaxhub.debugcount).slice(-$padding.length) + "-[" + $consoletype + "]" + $arg_title + " >> " + $arg_console + '\r\n\r\n'); ajaxhub.debugcount++; return; },  check_validity: function () { if (ebhub_ajax.is_valid === false) { ajaxhub.errorset(744, 'No Valid Ajax Object.'); return false; } else { if (ebhub_ajax.error.is_shown === true) { ajaxhub.errorclear(); } return true; } return; },  check_ifcrypt: function ($arg_methodid) { var $is_encrypted = false; if (ebhubjs.check_ifcrypt) { if (ebhub_ajax.status.is_tobecrypt[$arg_methodid]) { $is_encrypted = ebhub_ajax.status.is_tobecrypt[$arg_methodid]; } else { if (ebhub_ajax.html_id.eb_encrypt[$arg_methodid] === ebhubjs.check_ifcrypt(ebhub_ajax.html_id.eb_serverpkey[$arg_methodid])) { ebhub_ajax.status.is_tobecrypt[$arg_methodid] = true; $is_encrypted = true; } } } return $is_encrypted; },  run_prior: function ($arg_priorvalues, $arg_methodid) { var $is_success = false; if (Array.isArray($arg_priorvalues) === true) { ebhub_ajax.payload.user_options[$arg_methodid] = $arg_priorvalues; $is_success = true; } else { if ($arg_priorvalues === true) { ebhub_ajax.payload.user_options[$arg_methodid] = {}; $is_success = true; } } return $is_success; },  run_process: function ($arg_method, $arg_identity, $arg_content, $arg_errorcode, $arg_norender) { var $retval = null; var $methodid = $arg_method + '_' + $arg_identity; switch ($arg_method) { case "ajaxpost":  if (ebhubjs.ajaxpostcontent) { if (ebhubjs.ajaxposterror) { if ($arg_errorcode === '0') { ebhub_post.clearcontent(); $retval = ebhubjs.ajaxpostcontent($arg_identity, $arg_content, $arg_norender); } else { ebhubjs.ajaxposterror($arg_identity, $arg_errorcode, $arg_content); if (ebhub.waitpage[$methodid]) { document.getElementById($methodid).innerHTML = ebhub.waitpage[$methodid]; ebhub.waitpage[$methodid] = ''; } } } else { ajaxhub.errorset(746, 'No Available Function (ebhubjs.ajaxposterror)'); } } else { ajaxhub.errorset(748, 'No Available Function (ebhubjs.ajaxpostcontent)'); } break; case "ajaxmark":  if (ebhubjs.markcontent) { if (ebhubjs.markerror) { if ($arg_errorcode === '0') { ebhub_ajaxmark.clearcontent(); $retval = ebhubjs.markcontent($arg_identity, $arg_content, $arg_norender); } else { ebhubjs.markerror($arg_identity, $arg_errorcode, $arg_content); if (ebhub.waitpage[$methodid]) { document.getElementById($methodid).innerHTML = ebhub.waitpage[$methodid]; ebhub.waitpage[$methodid] = ''; } } } else { ajaxhub.errorset(750, 'No Available Function (ebhubjs.markerror)'); } } else { ajaxhub.errorset(752, 'No Available Function (ebhubjs.markcontent)'); } break; case "ajaxhash":  if (ebhubjs.hashcontent) { if (ebhubjs.hasherror) { if ($arg_errorcode === '0') { ebhub_ajaxhash.clearcontent(); $retval = ebhubjs.hashcontent($arg_identity, $arg_content, $arg_norender); } else { ebhubjs.hasherror($arg_identity, $arg_errorcode, $arg_content); if (ebhub.waitpage[$methodid]) { document.getElementById($methodid).innerHTML = ebhub.waitpage[$methodid]; ebhub.waitpage[$methodid] = ''; } } } else { ajaxhub.errorset(754, 'No Available Function (ebhubjs.hasherror)'); } } else { ajaxhub.errorset(756, 'No Available Function (ebhubjs.hashcontent)'); } break; default:  ajaxhub.errorset(758, 'Invalid Method: ' + $arg_method); break; } ebhub_ajax.firemeup(); return $retval; }   }; var ebhub_ajaxhash = { init: function () { if (ajaxhub.check_validity()) { ebhub_ajax.hash.urlhash = window.location.hash; ebhub_ajax.hash.urlhash = ebhub_ajax.hash.urlhash.toLowerCase(); if (ebhub_ajax.hash.urlhash === ebhub_ajax.hash.previous || ebhub_ajax.hash.urlhash === '') { if (ebhub_ajax.hash.is_reload === false) { ajaxhub.errorset(770, 'URL Hash is empty or a previous hash.'); return; } } if (!ebhub_ajax.hash.criteria.test(ebhub_ajax.hash.urlhash)) { ajaxhub.errorset(772, 'URL Hash is Invalid.'); return; } ebhub_ajax.hash.previous = ebhub_ajax.hash.urlhash; ebhub_ajax.hash.urlhash = ebhub_ajax.hash.urlhash.replace(/#/g, '/'); ebhub_ajax.hash.urlhash = ebhub_ajax.hash.urlhash.substring(1); ebhub_ajaxhash.ajax(ebhub_ajax.hash.urlhash); } return; },  ajax: function ($arg_hash) { var $returnval = null; if (ajaxhub.check_validity()) { var $method = "ajaxhash"; if (ebhub_ajax.is_encode === true) { var $identity = encodeURIComponent($arg_hash); } else { var $identity = $arg_hash; } $returnval = ajaxhub.set($method, $identity); } return $returnval; },  seturl: function () { if (ajaxhub.check_validity()) { if (window.location.hash !== ebhub_ajax.hash.previous) { window.location=ebhub_ajax.hash.current_url + ebhub_ajax.hash.previous; } else { ajaxhub.errorset(774, 'Current Hash is the same as Previous Hash.'); } } return; },  clearcontent: function () { var x = document.getElementsByClassName("eb_ajaxhashclear"); for (var i = 0; i < x.length; i++) { x[i].innerHTML = ''; } return; }   }; var ebhub_ajaxmark = { init: function () { if (ajaxhub.check_validity()) { var array_class = document.getElementsByClassName("eb_ajaxmark"); for (indexcount_a = 0; indexcount_a < array_class.length; indexcount_a++) { array_class[indexcount_a].addEventListener("click", ebhub_ajaxmark.event); } } return; },  event: function () { if (ajaxhub.check_validity()) { ebhub_ajaxmark.ajax(this.getAttribute("ebhub")); } return; }, ajax: function ($identity) { var $returnval = null; if (ajaxhub.check_validity()) { $returnval = ajaxhub.set("ajaxmark", $identity); } return $returnval; },  clearcontent: function () { var x = document.getElementsByClassName("eb_ajaxmarkclear"); for (var i = 0; i < x.length; i++) { x[i].innerHTML = ''; } return; }   }; var ebhub_post = { init: function() { if (ajaxhub.check_validity()) { var forms = document.getElementsByTagName("form"); for (var i = 0; i < forms.length; i++) { var $postal_id = forms[i].id; if (ebhub_ajax.html_id.eb_spakey && ebhub_ajax.html_id.eb_spaval) { if (ebhub_ajax.html_id.eb_spakey["syncpost_" + $postal_id] && ebhub_ajax.html_id.eb_spaval["syncpost_" + $postal_id]) { forms[i].addEventListener("submit", function($event){ ebhub_post.singleform(this.id, $event); }, false); } else { if (ebhub_ajax.html_id.eb_spakey["ajaxpost_" + $postal_id] && ebhub_ajax.html_id.eb_spaval["ajaxpost_" + $postal_id]) { forms[i].addEventListener("submit", ebhub_post.ajax);  } } } } } return; },  singleform: function ($identity, $event = null) { var $returnval = null; if (ajaxhub.check_validity()) { $returnval = ajaxhub.set("syncpost", $identity, document.getElementById($identity).elements, $event); } return $returnval; },  ajax: function() { var $returnval = null; if (ajaxhub.check_validity()) { $returnval = ajaxhub.set("ajaxpost", this.id, this.elements); } return $returnval; },  form: function ($arg_fields, $is_encrypted, $arg_methodid, $dataform, $arg_identity = null) { var $is_radiochecked = false; var $filledfields = new Object(); var $query = ''; var $fields = []; var $radioqty = 1; var $radiovalue = ''; if (ebhub_ajax.is_formdata === true) { ebhub_ajax.status.is_binary[$arg_methodid] = true; } for (var i = 0; i < $arg_fields.length; i++) { var $fieldname = $arg_fields[i].getAttribute("name"); if ($fieldname !== null) { switch ($arg_fields[i].type) { case 'file':  ebhub_ajax.status.is_binary[$arg_methodid] = true; break; case 'checkbox':  if ($arg_fields[i].checked === false) { $arg_fields[i].value = "_ebhub_input_blank"; $arg_fields[i].checked = true; } else { $arg_fields[i].value = "_ebhub_input_checked"; } break; case 'radio':  var $padding = "000"; if ($arg_fields[i].checked === true) { if ($is_radiochecked === false) { $is_radiochecked = true; if ($arg_fields[i].value === '' || $arg_fields[i].value === 'on') { $arg_fields[i].value = "_ebhub_input_checked_radio_" + ($padding+$radioqty).slice(-$padding.length); } $radiovalue = $arg_fields[i].value; } } else { if ($is_radiochecked === true) { $arg_fields[i].value = $radiovalue; } else { $arg_fields[i].value = "_ebhub_input_blank"; } } $radioqty++; break; case 'select-one':  case 'select-multiple':  break; default:  break; } switch ($arg_fields[i].type) { case 'submit':  case 'image':  case 'reset':  case 'button':  break; default:  if ($query !== '') { $query = $query + '&'; } if (ebhub_ajax.is_encode === true) { var $filling = $fieldname + '=' + encodeURIComponent($arg_fields[i].value); } else { var $filling = $fieldname + '=' + $arg_fields[i].value; } if ($is_encrypted === true) { $query = $query + $fieldname + '='; } else { $query = $query + $filling; } if (ebhub_ajax.is_encode === true) { $filledfields[$arg_fields[i].name] = encodeURIComponent($arg_fields[i].value); } else { $filledfields[$arg_fields[i].name] = $arg_fields[i].value; } break; } switch ($arg_fields[i].type) { case 'submit':  break; default:  switch ($arg_fields[i].value) { case '_ebhub_input_checked':  $fields[$arg_fields[i].id] = 'on'; break; case '_ebhub_input_blank':  $fields[$arg_fields[i].id] = 'off'; break; default:  if ($arg_fields[i].value !== '') { if (ebhub_ajax.is_encode === true) { $fields[$arg_fields[i].id] = encodeURIComponent($arg_fields[i].value); } else { $fields[$arg_fields[i].id] = $arg_fields[i].value; } } else { $fields[$arg_fields[i].id] = '_blank'; } break; } if (ebhub_ajax.status.is_binary[$arg_methodid] === true) { if ($arg_fields[i].type === 'file') { if ($arg_fields[i].files.length !== 0) { if ($arg_fields[i].files.length > 1) { for (var ix = 0; ix < $arg_fields[i].files.length; ix++) { $dataform.append($arg_fields[i].getAttribute("name") + '[]', $arg_fields[i].files[ix]); } } else { $dataform.append($fieldname, $arg_fields[i].files[0]); } } else { $dataform.append($fieldname, new Blob([], {type : 'text/plain'})); } } else { if ($is_encrypted === true) { $dataform.append($fieldname, ""); } else { if (ebhub_ajax.is_encode === true) { $dataform.append($fieldname, encodeURIComponent($arg_fields[i].value)); } else { $dataform.append($fieldname, $arg_fields[i].value); } } } } break; } if ($arg_identity !== null) { if ($is_encrypted === true) { document.getElementById($arg_identity).elements[i].value = ''; } else { document.getElementById($arg_identity).elements[i].value = $arg_fields[i].value; } } } } if ($is_encrypted === true) { var $serverpkey = ''; if (ebhub_ajax.html_id.eb_serverpkey[$arg_methodid] !== 'ebhub') { $serverpkey = ebhub_ajax.html_id.eb_serverpkey[$arg_methodid]; ebhub_ajax.payload.old_serverpkey = $serverpkey; ebhub_ajax.html_id.eb_serverpkey[$arg_methodid] = 'ebhub'; } else { if (ebhub_ajax.dynamics.serverpkey[$arg_methodid] && ebhub_ajax.dynamics.serverpkey[$arg_methodid] !== '0') { $serverpkey = ebhub_ajax.dynamics.serverpkey[$arg_methodid]; } else { $serverpkey = ebhub_ajax.payload.old_serverpkey; } } var $retval = ebhubjs.encrypt(JSON.stringify($filledfields), $serverpkey); var $cryptfield = 'eb_' + ebhub_ajax.html_id.eb_encrypt[$arg_methodid]; $dataform.append($cryptfield, $retval[0]); $query = $query + '&' + $cryptfield + '=' + $retval[0]; if ($arg_identity !== null) { var $element_input = document.createElement("input"); $element_input.type = "hidden"; $element_input.name = $cryptfield; $element_input.value = $retval[0]; document.getElementById($arg_identity).appendChild($element_input); } } return [$query, $fields, $dataform]; },  clearcontent: function () { var x = document.getElementsByClassName("eb_ajaxpostclear"); for (var i = 0; i < x.length; i++) { x[i].innerHTML = ''; } return; }   }; var ebhub = { waitpage: [],  savedpage: [],  pageheight: [],  waitshow: function ($arg_id, $arg_method, $arg_process) { var $methodid = ebhub_ajax.status.current_method + '_' + $arg_id; var $render_element = $methodid; var $is_exists = false; if (document.getElementById($methodid)) { $is_exists = true; } else { $render_element = "ebhub_ajax"; if (document.getElementById($render_element)) { $is_exists = true; } } if ($is_exists === true) { ebhub.waitpage[$render_element] = document.getElementById($render_element).innerHTML; ebhub.pageheight[$render_element] = document.getElementById($render_element).offsetHeight + "px"; switch ($arg_method) { case 'disableform':  var $fields = document.getElementById($arg_id).elements; for (var i = 0; i < $fields.length; i++) { $fields[i].disabled = true; if ($fields[i].type === 'submit') { $fields[i].type = 'hidden'; $fields[i].value = $arg_process[0]; document.getElementById("submitwait").innerHTML = "<br/><p><strong>" + $arg_process[0] + '</strong><img id="loading-image" src="' + $arg_process[1] +'" alt="Loading..."/></p>'; } } break; case 'pleasewait':  document.getElementById($render_element).innerHTML = '<img id="loading-image" src="' + $arg_process[0] +'" alt="Loading..." style="display:block; margin-left: auto; margin:0 auto;"/>'; break; default:  break; } document.getElementById($render_element).style.height = ebhub.pageheight[$render_element]; } ebhub_ajax.firemeup(); return; },  renderpage: function ($arg_id, $arg_content) { var $methodid = ebhub_ajax.status.current_method + '_' + $arg_id; var $render_element = $methodid; var $is_exists = false; if (document.getElementById($methodid)) { $is_exists = true; } else { $render_element = "ebhub_ajax"; if (document.getElementById($render_element)) { $is_exists = true; } } if ($is_exists === true) { document.getElementById($render_element).style.height = "auto"; if (ebhub.waitpage[$render_element]) { ebhub.savedpage[$render_element] = ebhub.waitpage[$render_element]; ebhub.waitpage[$render_element] = ''; } else { ebhub.savedpage[$render_element] = document.getElementById($render_element).innerHTML; } document.getElementById($render_element).innerHTML = $arg_content; } ebhub_ajax.firemeup(); return; },  gobackprevpage: function ($arg_methodid) { var $render_element = $arg_methodid; var $is_exists = false; if (document.getElementById($arg_methodid)) { $is_exists = true; } else { $render_element = "ebhub_ajax"; if (document.getElementById($render_element)) { $is_exists = true; } } if ($is_exists === true) { if (ebhub.savedpage[$render_element]) { if (ebhub.pageheight[$render_element]) { document.getElementById($render_element).style.height = ebhub.pageheight[$render_element]; } document.getElementById($render_element).innerHTML = ebhub.savedpage[$render_element]; ebhub.savedpage[$render_element] = ''; } } ebhub_ajax.firemeup(); return; },  showhide: function ($showhide_id) { if(document.getElementById($showhide_id).style.display === 'none') { document.getElementById($showhide_id).style.display = 'block'; } else { document.getElementById($showhide_id).style.display = 'none'; } return; },  showbodymsg: function ($msgid, $message) { document.getElementById($msgid).innerHTML = $message; return; } }; var $isvalid = true; if (html_id && html_id.length !== 0) { ebhub_ajax.html_id = html_id; if (ebhub_ajax.html_id && ebhub_ajax.html_id.length !== 0) { var html_idvar = ["eb_serverpkey", "eb_clientpkey", "eb_encrypt", "eb_rootlinkstatic", "eb_rootlinkdynamic", "eb_rootlinkdefault", "eb_rootlinkbase", "eb_syslinkstatic", "eb_syslinkdynamic", "eb_syslinkdefault", "eb_syslinkbase", "eb_postlinkpath", "eb_postlink", "eb_spadiv", "eb_spaorg", "eb_spaopt", "eb_spakey", "eb_spaval"]; for (var key in ebhub_ajax.html_id) { if (html_idvar.indexOf(key) === -1) { $isvalid = false; } if (typeof ebhub_ajax.html_id[key] !== "undefined" && ebhub_ajax.html_id[key].length === 0) { $isvalid = false; } } } } else { $isvalid = false; } if ($isvalid === true) { ebhub_ajax.is_valid = true; ebhub_ajax.hash.current_url = window.location.href; ebhub_ajax.firemeup(); setInterval('ajaxhub.errordeclare()', 1000); if (window.location.hash !== '') { ebhub_ajax.hash.urlhash = window.location.hash; ebhub_ajax.hash.urlhash = ebhub_ajax.hash.urlhash.replace(/#/g, '/'); ebhub_ajax.hash.urlhash = ebhub_ajax.hash.urlhash.substring(1); ebhub_ajaxhash.ajax(ebhub_ajax.hash.urlhash); } } else { ebhub_ajax.is_valid = false; var $invalid_object = 'No Valid Ajax Object'; ajaxhub.errorset(700, $invalid_object); ajaxhub.debug($invalid_object, 'Initialization'); }